#! /bin/bash
# Sync current path to remote machine. Create path if not exist in remote.
# Usage: myrsync <hostname1/ip1> <hostname2/ip2> ...

BkrPasswd=""

usage()
{
	echo ""
	echo "Example:"	
	echo "Cp all files/directories under current path to the remote same path"
	echo "$0 <remote ip address>"
	echo "$0 <hostname>"
	echo ""
	echo "Only cp a single file to remote"
	echo "$0 -p <the_file_path> <hostname>"
	echo ""
	echo "use other username to login (default root)"
	echo "$0 -l <other than root> <ip>"
	echo ""
}

until [ -z $1 ]; do
	case "$1" in
	-l|--login)
		user="$2"
		shift 2
		;;
	-p|--path) #-p --path can be directory or a single file name
		path=$(realpath $2)
		if [ -d $path ]; then
			path=${path}/
			shift 2
		elif [ -f $path ]; then
			shift 2
		else
			echo -e "Error:\n $path \ndoesn't exist"
			exit 1
		fi
		;;
	-*)
		echo "Warn: unsupport paramter: $1 "
		usage
		exit 1
		;;
	*)
		hosts+="$1 "
		shift
		;;
	esac
done

user=${user:-root}
path=${path:-$PWD/}

if [[ -z $hosts && ! -e /tmp/myrsync.cfg ]];then
	echo "hosts in \$1 can't empty"
	exit 1
elif [[ ! -z $hosts ]]
then
	echo $hosts > /tmp/myrsync.cfg
else
	hosts=`cat /tmp/myrsync.cfg`
fi

depth=0
max_depth=5
cp_dependency_accrodingto_metadata()
{
	if [ -r ./metadata ]
	then
		repoRequires=$(awk -F= '/repoRequires=/{print $2}' metadata)
		repoRequires=$(echo $repoRequires | tr ";" " ")

		if [ -z $repoRequires ]
		then
			echo "No more dependency"
			return 0
		fi

		prefix=${PWD%%networking*}

		for relative_path in $repoRequires
		do
			sync_path=${prefix}/${relative_path}/
			echo "rsync dependency lib path: ${sync_path}"
			#rsync -r --mkpath -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path} || {
			rsync -r -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path} 2> /dev/null || {
			if [ $ret == 11 ];then
				echo "Remote: mkdir -p ${sync_path}"
				ssh $user@$host "mkdir -p ${sync_path}"
				rsync -r -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path}
			else
				echo "sync repoRequires path fail: ${sync_path}"
				exit 1
			fi
			}
			pushd $sync_path
				((depth++))
				if [ $depth -lt $max_depth ]
				then
					# recursive call
					cp_dependency_accrodingto_metadata
				else
					echo "Too much dependency? loop?"
				fi
			popd
		done
	fi
}

cp_pub_key_to_remote()
{
	# awk get last not empty line
	pub_key=$(awk 'NF{s=$0}END{print s}' ~/.ssh/id_rsa.pub)

	# command execute on remote side
	remote_cmd="
	grep -q \"${pub_key}\" ~/.ssh/authorized_keys || {
		echo \"${pub_key}\" >> ~/.ssh/authorized_keys
	}
	"

	# Cp local pub key to remote
	# Attempt using 1minute private key, then beaker passwd
	ssh -i /usr/share/qa-tools/1minutetip/1minutetip -o BatchMode=yes $user@$host "$remote_cmd" && return 0
	[ -n $BkrPasswd ] && sshpass -p "${BkrPasswd}" ssh -o StrictHostKeyChecking=no $user@$host "$remote_cmd"
}

cp_self_to_remote()
{
	# Cp this script to remote

	# remote: add ~/.local/bin to $PATH
	cat <<-EOF | ssh $user@$host bash
	mkdir -p ~/.local/bin

	echo '
	# User specific environment
	if ! [[ "\$PATH" =~ "\$HOME/.local/bin:\$HOME/bin:" ]]
	then
	    PATH="\$HOME/.local/bin:\$HOME/bin:\$PATH"
	fi
	export PATH' >> ~/.bashrc
	EOF

	# scp this file to remote host
	self_path=$(realpath $0)
	scp $self_path $user@$host:~/.local/bin || exit 1
}

for host in $hosts;do
	echo host= $host
	echo user= $user

	for t in {1..4};do
		sed -in /$host/d ~/.ssh/known_hosts
		rsync --human-readable --progress -r -l -e 'ssh -o "NumberOfPasswordPrompts 0"' $path $user@$host:$path 2>/dev/null && break
		ret=$?
		if [ $ret == 12 ];then
			echo "Remote: yum -y install rsync"
			ssh $user@$host "yum -y install rsync"
		elif [ $ret == 11 ];then
			echo "Remote: mkdir -p $path"
			ssh $user@$host "mkdir -p $path"
			cp_dependency_accrodingto_metadata
		elif [ $ret == 255 ];then
			echo "Cp pub key to remote authorized_keys"
			cp_pub_key_to_remote
			# cp_self_to_remote
		elif [ $ret == 3 ];then
			path=$(dirname $path)/
			echo "remote directory doesn't exist, sync directory: $path"
		else
			echo "rsync unknown issue ret=$ret"
		fi
	done
done
