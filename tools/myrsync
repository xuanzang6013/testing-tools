#! /bin/bash
# Sync current path to remote machine. Create path if not exist in remote.
# Usage: myrsync <hostname1/ip1> <hostname2/ip2> ...

until [ -z $1 ]; do
	case "$1" in
	-l|--login)    user="$2"; shift 2;;
	-p|--rpath)    rpath="$2";rpath_flag=1; shift 2;;
	-*) shift;;
	*) break;;
	esac
done

user=${user:-root}
lpaths="$(pwd)/"
hosts="$*"

if [[ -z $hosts && ! -e /tmp/myrsync.cfg ]];then
	echo "hosts in \$1 can't empty"
	exit 1
elif [[ ! -z $hosts ]]
then
	echo $hosts > /tmp/myrsync.cfg
else
	hosts=`cat /tmp/myrsync.cfg`
fi

depth=0
max_depth=2
cp_dependency_accrodingto_metadata()
{
	if [ -r ./metadata ]
	then
		repoRequires=$(awk -F= '/repoRequires=/{print $2}' metadata)
		repoRequires=$(echo $repoRequires | tr ";" " ")
		prefix=${PWD%%networking*}

		for relative_path in $repoRequires
		do
			sync_path=${prefix}/${relative_path}/
			echo "rsync dependency lib path: ${sync_path}"
			rsync -r -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path} || { echo "sync repoRequires path fail: ${sync_path}"; exit 1; }
			pushd $sync_path
				((depth++))
				if [ $depth -lt $max_depth ]
				then
					# recursive call
					cp_dependency_accrodingto_metadata
				else
					echo "Too much dependency? loop?"
				fi
			popd
		done
	fi
}

cp_pub_key_to_remote()
{
	# awk get last not empty line
	pub_key=$(awk 'NF{s=$0}END{print s}' ~/.ssh/id_rsa.pub)

	# Attempt using 1minute private key, then cp local pub key to remote
	cat <<-EOF | ssh -i /usr/share/qa-tools/1minutetip/1minutetip $user@$host bash
	grep -q "${pub_key}" ~/.ssh/authorized_keys || {
		echo "${pub_key}" >> ~/.ssh/authorized_keys
	}
	EOF
}

cp_self_to_remote()
{
	# remote: add ~/.local/bin to $PATH
	cat <<-EOF | ssh $user@$host bash
	mkdir -p ~/.local/bin

	echo '
	# User specific environment
	if ! [[ "\$PATH" =~ "\$HOME/.local/bin:\$HOME/bin:" ]]
	then
	    PATH="\$HOME/.local/bin:\$HOME/bin:\$PATH"
	fi
	export PATH' >> ~/.bashrc
	EOF

	# scp this file to remote host
	self_path=$(realpath $0)
	scp $self_path $user@$host:~/.local/bin || exit 1
}

for host in $hosts;do
	for lpath in $lpaths;do
		if [ "$rpath_flag" == "1" ];then
			rpath=$rpath/`basename $lpath`/
		else
			rpath=$lpath
		fi
		echo rpath= $rpath
		echo host= $host
		echo user= $user


		for t in {1..4};do
			#rsync --human-readable --progress -r -e 'ssh -o "NumberOfPasswordPrompts 0"' $lpath $user@$host:$rpath && break
			rsync -r -e 'ssh -o "NumberOfPasswordPrompts 0"' $lpath $user@$host:$rpath 2>/dev/null && break
			ret=$?
			if [ $ret == 12 ];then
				echo "Remote: yum -y install rsync"
				ssh $user@$host "yum -y install rsync"
			elif [ $ret == 11 ];then
				echo "Remote: mkdir -p $rpath"
				ssh $user@$host "mkdir -p $rpath"
				cp_dependency_accrodingto_metadata
			elif [ $ret == 255 ];then
				echo "Cp pub key to remote authorized_keys"
				cp_pub_key_to_remote
				cp_self_to_remote
			else
				echo "rsync unknown issue ret=$ret"
			fi
		done
	done
done
