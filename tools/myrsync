#! /bin/bash

# Sync current path to remote machine. Create path if not exist in remote.
# Usage: myrsync <hostname1/ip1> <hostname2/ip2> ...
#
# Author Yi Chen <yiche@redhat.com>
# GPLv2


BkrPasswd=""

usage()
{
	echo ""
	echo "Example:"
	echo "Cp all files/directories under current path to the remote same path"
	echo "$0 <remote ip1> [ip2] ..."
	echo "$0 <hostname1> [hostname2] ..."
	echo "This paramter can be omitted from second usesage (restored in /tmp/$(basename $0).cfg)"
	echo ""
	echo "cp a single file to remote. if the file doesn't exist in remote, then cp all directory"
	echo "$0 -p <the_file_path> <hostname>"
	echo ""
	echo "Reverse fetch a single file from remote (won't overwrite remote)"
	echo "$0 -r <fetch file path> [ip]"
	echo ""
	echo "use another username to login (default root)"
	echo "$0 -l <other than root> <ip>"
	echo ""
}

until [ -z $1 ]; do
	case "$1" in
	-l|--login)
		user="$2"
		shift 2
		;;
	-p|--path|-f|--file|-d|--directory) # can be a directory or a file name
		path=$(realpath $2)
		if [ -d $path ]; then
			path=${path}/
			shift 2
		elif [ -f $path ]; then
			shift 2
		else
			echo -e "Error:\n $path \ndoesn't exist"
			exit 1
		fi
		;;
	-r|--reverse-copy)
		_dir=$(dirname $2)
		test -e ${_dir} || {
			echo "Local path \"${_dir}\" doesn't exists, exit..."
			exit 1
		}
		_target=$(realpath $2)
		shift 2
		;;
	-*)
		echo "Warn: unsupport paramter: $1 "
		usage
		exit 1
		;;
	*)
		hosts+="$1 "
		shift
		;;
	esac
done

user=${user:-root}
path=${path:-$PWD/}


if [[ -z $hosts && ! -e /tmp/$(basename $0).cfg ]];then
	echo "hosts in \$1 can't empty"
	exit 1
elif [[ ! -z $hosts ]]
then
	echo $hosts > /tmp/myrsync.cfg
else
	hosts=`cat /tmp/myrsync.cfg`
fi

echo "user = $user"
echo "host = $hosts"
echo "path= $path"
echo

depth=0
max_depth=5

_do_sync()
{
	prefix=${PWD}
	# find the git repo root path
	until [ -e $prefix/.git/config ];do
		prefix=$(dirname $prefix)
		if [ "$prefix" == "/" ];then
			# using "RepoRequires" field in metadata file to guess the git repo root path.
			t=$(echo "$@" | awk '{print $NF}')
			t=$(echo "$t" | cut -d'/' -f1)
			prefix=${PWD%%$t*}
			echo "Warning: presume prefix=$prefix"
			break
		fi
	done


	for relative_path in $@
	do
		sync_path=${prefix}/${relative_path}/
		echo "rsync dependency lib path: ${sync_path}"
		Synced+="${sync_path}\n"

		#rsync -r --mkpath -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path} || {
		rsync -r -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path} 2> /dev/null || {
		if [ $ret == 11 ];then
			echo "Remote: mkdir -p ${sync_path}"
			ssh $user@$host "mkdir -p ${sync_path}"
			rsync -r -e 'ssh -o "NumberOfPasswordPrompts 0"' ${sync_path} $user@$host:${sync_path}
		else
			echo "sync repoRequires path fail: ${sync_path}"
			exit 1
		fi
		}
		pushd $sync_path
			((depth++))
			if [ $depth -lt $max_depth ]
			then
				# recursive call
				cp_dependency_accrodingto_metadata
			else
				echo "Too much dependencies? loop?"
			fi
		popd
	done

}

cp_dependency_accrodingto_metadata()
{
	local repoRequires=$(find . -name "metadata" |xargs -I {} awk -F= '/repoRequires=/{print $2}' {} | tr ";" "\n" |sort |uniq)
	if [ -z "$repoRequires" ]
	then
		echo "No more dependency"
		return 0
	fi
	_do_sync $repoRequires
}

cp_pub_key_to_remote()
{
	# awk get last not empty line
	pub_key=$(awk 'NF{s=$0}END{print s}' ~/.ssh/id_rsa.pub)

	# command execute on remote side
	remote_cmd="
	grep -q \"${pub_key}\" ~/.ssh/authorized_keys || {
		echo \"${pub_key}\" >> ~/.ssh/authorized_keys
	}
	"

	# Cp local pub key to remote
	# Attempt using 1minute private key, then beaker passwd
	if [ -e /usr/share/qa-tools/1minutetip/1minutetip ]; then
		ssh -i /usr/share/qa-tools/1minutetip/1minutetip -o BatchMode=yes $user@$host "$remote_cmd" && return 0
	fi
	if [ -n $BkrPasswd ] && command -v sshpass ; then
		 sshpass -p "${BkrPasswd}" ssh -o StrictHostKeyChecking=no $user@$host "$remote_cmd" && return 0
	fi
	# need passwd
	echo "Need input passwd"
	ssh $user@$host "$remote_cmd"
}

cp_tools_to_remote()
{
	echo "Cp tools to remote ~/.local/bin"

	# remote: add ~/.local/bin to $PATH
	cat <<-EOF | ssh $user@$host bash
	mkdir -p ~/.local/bin

	echo '
	# User specific environment
	if ! [[ "\$PATH" =~ "\$HOME/.local/bin:\$HOME/bin:" ]]
	then
	    PATH="\$HOME/.local/bin:\$HOME/bin:\$PATH"
	fi
	export PATH' >> ~/.bashrc
	EOF

	# scp this file to remote host
	self_path=$(realpath $0)
	scp $self_path $(which kexecreboot) $(which kernel_install) $user@$host:~/.local/bin/ > /dev/null || exit 1
}

if [ -n "$_target" ];then
	host=$(echo $hosts | awk '{print $1}')
	echo "cp $_target from $host"
	rsync -av ${user:-root}@${host}:${_target} ${_target}
	ret=$?
	if [ $ret == 23 ];then
		echo "Remote $_target path doesn't exists"
	fi
	exit $ret
fi

for host in $hosts;do
	for t in {1..4};do
		sed -in /$host/d ~/.ssh/known_hosts
		rsync --human-readable --progress -r -l -e 'ssh -o "NumberOfPasswordPrompts=0" -o StrictHostKeyChecking=no' $path $user@$host:$path 2>/dev/null && break
		ret=$?
		if [ $ret == 12 ];then
			echo "Remote: yum -y install rsync"
			ssh $user@$host "yum -y install rsync"
		elif [ $ret == 11 ];then
			echo "Remote: mkdir -p $path"
			ssh $user@$host "mkdir -p $path"
			cp_dependency_accrodingto_metadata
		elif [ $ret == 255 ];then
			echo "Cp pub key to remote authorized_keys"
			cp_pub_key_to_remote
			cp_tools_to_remote
		elif [ $ret == 3 ];then
			echo "Remote: mkdir -p $path"
			ssh $user@$host "mkdir -p $path"
			#path=$(dirname $path)/
			#echo "remote path doesn't exist, cp the whole directory: $path"
		elif [ $ret == 20 ];then
			echo -e "\nInterrupted by Ctrl+C exit..."
			exit 0
		elif [ $ret == 23 ];then
			echo -e "\nrsync error: some files/attrs were not transferred (see previous errors) (code 23)"
			exit 0
		else
			echo "rsync unknown issue ret=$ret"
		fi
	done
done
Synced+="${path}\n"

echo ""
echo "Synced path:"
echo -e "${Synced}"
